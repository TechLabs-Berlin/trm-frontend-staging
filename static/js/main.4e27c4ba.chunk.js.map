{"version":3,"sources":["config.js","dataProvider.js","authProvider.js","i18nProvider.js","login.js","theme.js","fields/stateSelect.js","inputs/stateSelect.js","fields/trackSelect.js","inputs/trackSelect.js","techies.js","fields/formTypeSelect.js","fields/relativeTime.js","inputs/formTypeSelect.js","forms.js","fields/termSelect.js","inputs/termSelect.js","semesters.js","fields/formResponseAnswers.js","fields/json.js","form_responses.js","team_members.js","App.js","serviceWorker.js","index.js"],"names":["clientId","hostedDomain","hasuraProvider","hasToken","localStorage","getItem","buildProvider","token","client","ApolloClient","headers","uri","config","buildFieldsCustom","type","res","buildFields","name","push","gqlTypes","buildQuery","buildQueryFactory","buildVariables","iR","buildGqlQuery","buildMetaArgs","buildArgs","buildApolloArgs","getResponseParser","buildHasuraProvider","a","Promise","reject","authProvider","login","code","request","Request","method","body","JSON","stringify","Headers","fetch","then","response","status","Error","statusText","json","setItem","logout","removeItem","resolve","checkAuth","args","checkError","err","console","log","getPermissions","role","messages","resources","techies","fields","first_name","last_name","techie_key","forms","form_id","imports_techies","form_responses","team_members","englishMessages","polyglotI18nProvider","LoginPaper","styled","Paper","padding","loginTheme","createMuiTheme","palette","background","default","GREY","typography","fontFamily","useStyles","makeStyles","root","width","position","left","top","transform","centeredBlock","centeredText","LoginPage","props","notify","useNotify","useLogin","classes","responseGoogle","error","ThemeProvider","theme","CssBaseline","Notification","className","elevation","src","alt","scope","responseType","onSuccess","onFailure","cookiePolicy","primary","main","StateSelectField","source","record","SelectField","choices","id","defaultProps","addLabel","StateSelectInput","SelectInput","TrackSelectField","TrackSelectInput","TechieFilter","Filter","TextInput","label","alwaysOn","TechieList","List","filters","perPage","Datagrid","rowClick","TextField","TechieEditToolbar","Toolbar","SaveButton","TechieTitle","title","TechieEdit","Edit","TabbedForm","toolbar","FormTab","ReferenceInput","reference","optionText","NullableBooleanInput","displayNull","multiline","ReferenceManyField","target","FormTypeSelectField","RelativeTimeField","fromNow","FormTypeSelectInput","FormFilter","FormList","FormTitle","description","FormEdit","SimpleForm","DateField","showTime","FormCreate","Create","TermSelectField","TermSelectInput","SemesterList","SemesterTitle","SemesterEdit","DateInput","SemesterCreate","FormResponseAnswersField","Object","entries","answers","map","key","answer","ListItem","ListItemIcon","ListItemText","secondary","value","JSONField","collapsed","collapseStringsAfterLength","FormResponseFilter","FormResponseList","sort","field","order","FormResponseTitle","form","FormResponseShow","Show","SimpleShowLayout","ReferenceField","TeamMemberList","TeamMemberTitle","TeamMemberEdit","TeamMemberCreate","App","Admin","dataProvider","i18nProvider","loginPage","Resource","list","edit","icon","UserIcon","create","ChatBubbleOutlineIcon","show","CommentIcon","QueryBuilderIcon","PeopleOutlineIcon","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4e27c4ba.chunk.js","sourcesContent":["export default {\n  graphqlApiURL: 'https://trm-staging-hasura-xwaitoan6a-ew.a.run.app/v1/graphql',\n  authFnURL: 'https://europe-west3-techlabs-trm-test.cloudfunctions.net/trm-auth-staging',\n  oAuth: {\n    clientId: '982186032389-28u4o2ui0up26vtp6ajp4ce7kqd69p7v.apps.googleusercontent.com',\n    hostedDomain: 'techlabs.org'\n  }\n}\n","import ApolloClient from 'apollo-boost'\nimport buildHasuraProvider from 'ra-data-hasura-graphql/src'\n// import buildDataProvider from 'ra-data-hasura-graphql';\nimport {\n  buildQueryFactory\n} from 'ra-data-hasura-graphql/src/buildQuery';\nimport buildVariables from 'ra-data-hasura-graphql/src/buildVariables';\nimport {\n  buildGqlQuery,\n  buildFields,\n  buildMetaArgs,\n  buildArgs,\n  buildApolloArgs,\n} from 'ra-data-hasura-graphql/src/buildGqlQuery';\nimport getResponseParser from 'ra-data-hasura-graphql/src/getResponseParser';\nimport * as gqlTypes from 'graphql-ast-types-browser';\n\nimport config from './config'\n\nlet hasuraProvider = null\n\nconst hasToken = () => localStorage.getItem('token') !== null\n\nconst buildProvider = () => {\n  const token = localStorage.getItem('token')\n  const client = new ApolloClient({\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    uri: config.graphqlApiURL,\n  })\n  const buildFieldsCustom = (type) => {\n    let res = buildFields(type);\n    if (type.name === 'form_responses') {\n        // here we add additional fields we want to query for apps.\n        // we are using the graphql-ast-types functions which is ast representation for graphql\n        res.push(\n            gqlTypes.field(\n                gqlTypes.name('form'),\n                null,\n                null,\n                null,\n                gqlTypes.selectionSet([\n                    gqlTypes.field(gqlTypes.name('description')),\n                ])\n            )\n        );\n        res.push(\n          gqlTypes.field(\n              gqlTypes.name('techie'),\n              null,\n              null,\n              null,\n              gqlTypes.selectionSet([\n                  gqlTypes.field(gqlTypes.name('first_name')),\n                  gqlTypes.field(gqlTypes.name('last_name')),\n              ])\n          )\n      );\n    }\n    return res;\n  };\n  const buildGqlQueryCustom = (iR) =>\n    buildGqlQuery(\n      iR,\n      buildFieldsCustom,\n      buildMetaArgs,\n      buildArgs,\n      buildApolloArgs\n    );\n  const buildQuery = buildQueryFactory(\n    buildVariables,\n    buildGqlQueryCustom,\n    getResponseParser\n  );\n  return buildHasuraProvider({\n    client,\n    buildQuery\n  })\n}\n\nexport default async (...args) => {\n  if (hasuraProvider === null && hasToken()) {\n    hasuraProvider = await buildProvider()\n  }\n  if (hasuraProvider !== null) {\n    return hasuraProvider(...args)\n  }\n  return Promise.reject('not logged in')\n}\n","import config from './config'\n\nconst authProvider = {\n  login: ({ code }) =>  {\n      const request = new Request(config.authFnURL, {\n          method: 'POST',\n          body: JSON.stringify({ code }),\n          headers: new Headers({ 'Content-Type': 'application/json' }),\n      });\n      return fetch(request)\n          .then(response => {\n              if (response.status < 200 || response.status >= 300) {\n                  throw new Error(response.statusText);\n              }\n              return response.json();\n          })\n          .then(({ token }) => {\n              localStorage.setItem('token', token);\n          });\n  },\n  logout: () => {\n    localStorage.removeItem('token')\n    return Promise.resolve()\n  },\n  checkAuth: (args) => {\n    return localStorage.getItem('token') ? Promise.resolve() : Promise.reject()\n  },\n  checkError: (err) => {\n    console.log(`checkError: ${err}`)\n    return Promise.resolve()\n  },\n  getPermissions: () => {\n    const role = localStorage.getItem('permissions');\n    return role ? Promise.resolve(role) : Promise.reject();\n  }\n};\n\nexport default authProvider;\n","import englishMessages from 'ra-language-english';\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\n\nlet messages = {\n  resources: {\n    techies: {\n      name: 'Techie |||| Techies',\n      fields: {\n        first_name: 'First Name',\n        last_name: 'Last Name',\n        techie_key: 'Techie Key'\n      }\n    },\n    forms: {\n      fields: {\n        form_id: 'Typeform Form ID',\n        imports_techies: 'Imports Techies?'\n      }\n    },\n    form_responses: {\n      name: 'Form Response |||| Form Responses',\n      fields: {\n        'form.description': 'Form',\n        'techie.first_name': 'First Name',\n        'techie.last_name': 'Last Name'\n      }\n    },\n    team_members: {\n      name: 'Team Member |||| Team Members',\n      fields: {\n        first_name: 'First Name',\n        last_name: 'Last Name',\n      }\n    }\n  },\n  ...englishMessages\n};\n\nexport default polyglotI18nProvider(() => messages)\n","import * as React from 'react';\nimport { useLogin, useNotify, Notification } from 'react-admin';\nimport { ThemeProvider, makeStyles, styled } from '@material-ui/styles';\nimport Paper from '@material-ui/core/Paper';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport GREY from '@material-ui/core/colors/grey';\nimport { GoogleLogin } from 'react-google-login';\n\nimport config from './config'\n\nconst LoginPaper = styled(Paper)({\n    padding: '30px',\n});\n\nexport const loginTheme = createMuiTheme({\n    palette: {\n      background: {\n        default: GREY[200]\n      }\n    },\n    typography: {\n        fontFamily: ['Nunito Sans', 'Helvetica', 'Arial', 'sans-serif']\n    }\n});\n\nconst useStyles = makeStyles({\n    root: {\n        width: '400px',\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        '-webkit-transform': 'translate(-50%, -50%)',\n        transform: 'translate(-50%, -50%)'\n    },\n    centeredBlock: {\n        'margin-left': 'auto',\n        'margin-right': 'auto'\n    },\n    centeredText: {\n        'text-align': 'center'\n    }\n});\n\n\nconst LoginPage = (props) => {\n    const notify = useNotify();\n    const login = useLogin();\n    const classes = useStyles(props);\n    const responseGoogle = (response) => {\n        if('code' in response) {\n            login({ code: response.code })\n            return\n        }\n        console.error(response)\n        notify('Sign in with Google failed')\n    }\n\n    return (\n        <ThemeProvider theme={loginTheme}>\n            <CssBaseline />\n            <Notification />\n            <div className={classes.root}>\n                <LoginPaper elevation={3} className={classes.centeredText}>\n                    <img src=\"techlabs-logo.svg\" className={classes.centeredBlock} alt=\"TechLabs Logo\" />\n                    <h1 className={classes.centeredText}>Techie Relationship Management</h1>\n                    <GoogleLogin\n                        clientId={config.oAuth.clientId}\n                        hostedDomain={config.oAuth.hostedDomain}\n                        scope=\"profile email https://www.googleapis.com/auth/admin.directory.group.readonly\"\n                        responseType=\"code\"\n                        onSuccess={responseGoogle}\n                        onFailure={responseGoogle}\n                        cookiePolicy={'single_host_origin'}\n                    />\n                </LoginPaper>\n            </div>\n        </ThemeProvider>\n    );\n};\n\nexport default LoginPage;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#fb1d5c'\n    }\n  },\n  typography: {\n    fontFamily: ['Nunito Sans', 'Helvetica', 'Arial', 'sans-serif']\n  }\n});\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport { SelectField } from 'react-admin';\n\nexport const StateSelectField = ({ source, record = {}}) => {\n  return <SelectField source={source} record={record} choices={[\n    { id: 'PROSPECT', name: 'Prospect' },\n    { id: 'APPLICANT', name: 'Applicant' },\n    { id: 'REJECTED', name: 'Rejected' },\n    { id: 'LEARNER', name: 'Learner' },\n    { id: 'DROPPED', name: 'Dropped' },\n    { id: 'ALUMNI', name: 'Alumni' },\n  ]} />\n}\n\nStateSelectField.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string.isRequired,\n};\n\nStateSelectField.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport { SelectInput } from 'react-admin';\n\nexport const StateSelectInput = ({ source, record = {}}) => {\n  return <SelectInput source={source} record={record} choices={[\n    { id: 'PROSPECT', name: 'Prospect' },\n    { id: 'APPLICANT', name: 'Applicant' },\n    { id: 'REJECTED', name: 'Rejected' },\n    { id: 'LEARNER', name: 'Learner' },\n    { id: 'DROPPED', name: 'Dropped' },\n    { id: 'ALUMNI', name: 'Alumni' },\n  ]} />\n}\n\nStateSelectInput.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string.isRequired,\n};\n\nStateSelectInput.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport { SelectField } from 'react-admin';\n\nexport const TrackSelectField = ({ source, record = {}}) => {\n  return <SelectField source={source} record={record} choices={[\n    { id: 'DS', name: 'Data Science' },\n    { id: 'AI', name: 'Artificial Intelligence' },\n    { id: 'WEBDEV', name: 'Web Development' },\n    { id: 'UX', name: 'User Experience Design' },\n  ]} />\n}\n\nTrackSelectField.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string.isRequired,\n};\n\nTrackSelectField.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport { SelectInput } from 'react-admin';\n\nexport const TrackSelectInput = ({ source, record = {}}) => {\n  return <SelectInput source={source} record={record} choices={[\n    { id: 'DS', name: 'Data Science' },\n    { id: 'AI', name: 'Artificial Intelligence' },\n    { id: 'WEBDEV', name: 'Web Development' },\n    { id: 'UX', name: 'User Experience Design' },\n  ]} />\n}\n\nTrackSelectInput.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string.isRequired,\n};\n\nTrackSelectInput.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport {\n  Filter,\n  List,\n  Datagrid,\n  TextField,\n  Edit,\n  TabbedForm,\n  FormTab,\n  ReferenceManyField,\n  TextInput,\n  SelectInput,\n  ReferenceInput,\n  NullableBooleanInput,\n  Toolbar,\n  SaveButton\n} from 'react-admin';\nimport { StateSelectField } from './fields/stateSelect'\nimport { StateSelectInput } from './inputs/stateSelect'\nimport { TrackSelectField } from './fields/trackSelect'\nimport { TrackSelectInput } from './inputs/trackSelect'\n\nconst TechieFilter = (props) => (\n  <Filter {...props}>\n      <TextInput label=\"Search\" source=\"techie_key\" alwaysOn />\n      <TextInput source=\"email\" />\n      <SelectInput source=\"semester\" choices={[\n        { id: 'S_2020_01', name: '2020-01' },\n        { id: 'S_2020_02', name: '2020-02' },\n      ]} />\n      <SelectInput source=\"state\" choices={[\n        { id: 'PROSPECT', name: 'Prospect' },\n        { id: 'APPLICANT', name: 'Applicant' },\n        { id: 'REJECTED', name: 'Rejected' },\n        { id: 'LEARNER', name: 'Learner' },\n        { id: 'DROPPED', name: 'Dropped' },\n        { id: 'ALUMNI', name: 'Alumni' },\n      ]} />\n  </Filter>\n);\n\nexport const TechieList = props => (\n    <List {...props} filters={<TechieFilter />} perPage={25}>\n        <Datagrid rowClick=\"edit\">\n            <StateSelectField source=\"state\" />\n            <TextField source=\"first_name\" />\n            <TextField source=\"last_name\" />\n            <TrackSelectField source=\"application_track_choice\" />\n        </Datagrid>\n    </List>\n);\n\nconst TechieEditToolbar = props => (\n  <Toolbar {...props} >\n      <SaveButton />\n  </Toolbar>\n);\n\nconst TechieTitle = ({ record }) => {\n  let title = ''\n  if(record && record.first_name && record.last_name) {\n    title = record.first_name + ' ' + record.last_name\n  } else if(record && record.techie_key) {\n    title = record.techie_key\n  } else if(record && record.id) {\n    title = record.id\n  }\n  return <span>Techie <strong>{title}</strong></span>;\n};\n\nexport const TechieEdit = props => (\n  <Edit title={<TechieTitle />} {...props}>\n      <TabbedForm toolbar={<TechieEditToolbar />}>\n          <FormTab label=\"Master Data\">\n            <ReferenceInput label=\"Semester\" source=\"semester_id\" reference=\"semesters\">\n                <SelectInput optionText=\"description\" />\n            </ReferenceInput>\n            <StateSelectInput source=\"state\" />\n            <TextInput source=\"first_name\" />\n            <TextInput source=\"last_name\" />\n            <TextInput source=\"email\" />\n            <TextField source=\"techie_key\" />\n          </FormTab>\n          <FormTab label=\"Application\">\n            <TrackSelectField source=\"application_track_choice\" />\n            <ReferenceInput label=\"Assigned Team Member\" source=\"assigned_team_member_id\" reference=\"team_members\">\n                <SelectInput optionText={(record) => `${record.first_name} ${record.last_name}`} />\n            </ReferenceInput>\n            <NullableBooleanInput source=\"application_successful\" displayNull />\n            <TextInput multiline source=\"notes\" />\n          </FormTab>\n          <FormTab label=\"Academy\">\n            <TrackSelectInput source=\"track\" />\n          </FormTab>\n          <FormTab label=\"Form Submissions\">\n            <ReferenceManyField label=\"Form Responses by Techie\" reference=\"form_responses\" target=\"techie_id\">\n              <Datagrid rowClick=\"show\">\n                <TextField label=\"Form Description\" source=\"form.description\" />\n                <TextField label=\"Submission created at\" source=\"created_at\" />\n              </Datagrid>\n            </ReferenceManyField>\n          </FormTab>\n      </TabbedForm>\n  </Edit>\n);\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport { SelectField } from 'react-admin';\n\nexport const FormTypeSelectField = ({ source, record = {}}) => {\n  return <SelectField source={source} record={record} choices={[\n    { id: 'APPLICATION', name: 'Application Form' },\n    { id: 'PERSONALIZED', name: 'Personalized Form' },\n    { id: 'ANONYMOUS', name: 'Anonymous Form' },\n  ]} />\n}\n\nFormTypeSelectField.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string.isRequired,\n};\n\nFormTypeSelectField.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\n\nexport const RelativeTimeField = ({ source, record = {} }) => {\n  return <Moment fromNow>{record[source]}</Moment>\n}\n\nRelativeTimeField.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string.isRequired,\n};\n\nRelativeTimeField.defaultProps = {\naddLabel: true\n}\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport { SelectInput } from 'react-admin';\n\nexport const FormTypeSelectInput = ({ source, record = {}}) => {\n  return <SelectInput source={source} record={record} choices={[\n    { id: 'APPLICATION', name: 'Application Form' },\n    { id: 'PERSONALIZED', name: 'Personalized Form' },\n    { id: 'ANONYMOUS', name: 'Anonymous Form' },\n  ]} />\n}\n\nFormTypeSelectInput.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string.isRequired,\n};\n\nFormTypeSelectInput.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport { Filter, List, Datagrid, DateField, TextField, ReferenceManyField, ReferenceInput, Edit, SimpleForm, TextInput, SelectInput, Create } from 'react-admin';\nimport { FormTypeSelectField } from \"./fields/formTypeSelect\";\nimport { RelativeTimeField } from './fields/relativeTime'\nimport { FormTypeSelectInput } from \"./inputs/formTypeSelect\";\n\nconst FormFilter = (props) => (\n  <Filter {...props}>\n      <TextInput label=\"Search\" source=\"description\" alwaysOn />\n      <TextInput source=\"form_id\" />\n  </Filter>\n);\n\nexport const FormList = props => (\n    <List {...props} filters={<FormFilter />} perPage={25}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"typeform_id\" />\n            <FormTypeSelectField source=\"form_type\" />\n            <TextField source=\"description\" />\n        </Datagrid>\n    </List>\n);\n\nconst FormTitle = ({ record }) => {\n  let title = ''\n  if(record && record.description) {\n    title = record.description\n  } else if(record && record.id) {\n    title = record.id\n  }\n  return <span>Form <strong>{title}</strong></span>;\n};\n\nexport const FormEdit = props => (\n  <Edit title={<FormTitle />} {...props}>\n      <SimpleForm>\n          <ReferenceInput label=\"Semester\" source=\"semester_id\" reference=\"semesters\">\n              <SelectInput optionText=\"description\" />\n          </ReferenceInput>\n          <TextInput source=\"typeform_id\" />\n          <FormTypeSelectInput source=\"form_type\" />\n          <TextInput source=\"description\" />\n          <DateField source=\"webhook_installed_at\" showTime={true} />\n          <ReferenceManyField label=\"Form Responses\" reference=\"form_responses\" target=\"form_id\">\n              <Datagrid rowClick=\"show\">\n                <TextField source=\"techie.first_name\" />\n                <TextField source=\"techie.last_name\" />\n                <TextField label=\"Time\" source=\"created_at\" />\n                <RelativeTimeField label=\"Time ago\" source=\"created_at\" />\n              </Datagrid>\n            </ReferenceManyField>\n      </SimpleForm>\n  </Edit>\n);\n\nexport const FormCreate = props => (\n  <Create {...props}>\n    <SimpleForm>\n          <ReferenceInput label=\"Semester\" source=\"semester_id\" reference=\"semesters\">\n              <SelectInput optionText=\"description\" />\n          </ReferenceInput>\n          <TextInput source=\"typeform_id\" />\n          <FormTypeSelectInput source=\"form_type\" />\n          <TextInput source=\"description\" />\n      </SimpleForm>\n  </Create>\n);\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport { SelectField } from 'react-admin';\n\nexport const TermSelectField = ({ source, record = {}}) => {\n  return <SelectField source={source} record={record} choices={[\n    { id: '2020_01', name: '2020-01 (Summer)' },\n    { id: '2020_02', name: '2020-02 (Winter)' },\n    { id: '2021_01', name: '2021-01 (Summer)' },\n  ]} />\n}\n\nTermSelectField.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string.isRequired,\n};\n\nTermSelectField.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport { SelectInput } from 'react-admin';\n\nexport const TermSelectInput = ({ source, record = {}}) => {\n  return <SelectInput source={source} record={record} choices={[\n    { id: '2020_01', name: '2020-01 (Summer)' },\n    { id: '2020_02', name: '2020-02 (Winter)' },\n    { id: '2021_01', name: '2021-01 (Summer)' },\n  ]} />\n}\n\nTermSelectInput.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string.isRequired,\n};\n\nTermSelectInput.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Edit,\n  SimpleForm,\n  TextInput,\n  DateInput,\n  Create\n} from 'react-admin';\nimport { TermSelectField } from \"./fields/termSelect\";\nimport { TermSelectInput } from \"./inputs/termSelect\";\n\nexport const SemesterList = props => (\n    <List {...props} perPage={25}>\n        <Datagrid rowClick=\"edit\">\n            <TermSelectField source=\"term\" />\n            <TextField source=\"description\" />\n        </Datagrid>\n    </List>\n);\n\nconst SemesterTitle = ({ record }) => {\n  if(record && record.description) {\n    return <span>Semester <strong>{record.description}</strong></span>\n  } else if(record && record.id) {\n    return <span>Semester <strong>{record.id}</strong></span>\n  }\n  return <span>Semester</span>;\n};\n\nexport const SemesterEdit = props => (\n  <Edit title={<SemesterTitle />} {...props}>\n      <SimpleForm>\n          <TermSelectInput source=\"term\" />\n          <TextInput source=\"description\" />\n          <DateInput source=\"starts_at\" />\n          <DateInput source=\"application_period_ends_at\" />\n          <DateInput source=\"academy_phase_ends_at\" />\n          <DateInput source=\"ends_at\" />\n      </SimpleForm>\n  </Edit>\n);\n\nexport const SemesterCreate = props => (\n  <Create {...props}>\n    <SimpleForm>\n          <TermSelectInput source=\"term\" />\n          <TextInput source=\"description\" />\n          <DateInput source=\"starts_at\" />\n          <DateInput source=\"application_period_ends_at\" />\n          <DateInput source=\"academy_phase_ends_at\" />\n          <DateInput source=\"ends_at\" />\n      </SimpleForm>\n  </Create>\n);\n","import * as React from \"react\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\n\nexport const FormResponseAnswersField = ({ record = {}}) => {\n  return (\n    <List>\n      {Object.entries(record.answers).map(([key, answer]) => {\n        return (\n          <ListItem key={key}>\n            <ListItemIcon>\n              <ArrowRightIcon />\n            </ListItemIcon>\n            <ListItemText primary={key} secondary={<span>{answer.value}</span>} />\n          </ListItem>\n        )\n      })}\n    </List>\n  )\n}\n\nFormResponseAnswersField.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport ReactJson from 'react-json-view'\n\nexport const JSONField = ({ source, record = {} }) => {\n  return <ReactJson\n    src={record[source]}\n    collapsed={2}\n    collapseStringsAfterLength={60}\n  />\n}\n\nJSONField.propTypes = {\n    label: PropTypes.string,\n    record: PropTypes.object,\n    source: PropTypes.string.isRequired,\n};\n\nJSONField.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport {\n    Filter,\n    List,\n    Datagrid,\n    TextField,\n    TextInput,\n    ReferenceField,\n    Show,\n    SimpleShowLayout,\n    TabbedForm,\n    FormTab,\n    DateField\n} from 'react-admin';\nimport { FormResponseAnswersField } from './fields/formResponseAnswers';\nimport { JSONField } from './fields/json'\nimport { RelativeTimeField } from './fields/relativeTime'\n\nconst FormResponseFilter = (props) => (\n  <Filter {...props}>\n      <TextInput label=\"Search by typeform_id\" source=\"typeform_id\" alwaysOn />\n      <TextInput source=\"typeform_response_token\" />\n  </Filter>\n);\n\nexport const FormResponseList = props => (\n    <List {...props} filters={<FormResponseFilter />} perPage={25} sort={{ field: 'created_at', order: 'DESC' }}>\n        <Datagrid rowClick=\"show\">\n            <TextField source=\"form.description\" />\n            <TextField source=\"techie.first_name\" />\n            <TextField source=\"techie.last_name\" />\n            <RelativeTimeField source=\"created_at\" />\n        </Datagrid>\n    </List>\n);\n\nconst FormResponseTitle = ({ record }) => {\n    if(record && record.form && record.form.description) {\n      return <span>Form Response to Form <strong>{record.form.description}</strong></span>\n    } else if(record && record.id) {\n      return <span>Form Response <strong>{record.id}</strong></span>\n    }\n    return <span>Form Response</span>;\n};\n\nexport const FormResponseShow = props => (\n    <Show title={<FormResponseTitle /> } {...props}>\n      <SimpleShowLayout>\n        <TabbedForm toolbar={null}>\n            <FormTab label=\"Answers\">\n                <ReferenceField label=\"Form\" source=\"form_id\" reference=\"forms\">\n                    <TextField source=\"description\" />\n                </ReferenceField>\n                <DateField source=\"created_at\" showTime={true} />\n                <FormResponseAnswersField label=\"Answers\" />\n            </FormTab>\n            <FormTab label=\"Details\">\n                <TextField source=\"form_id\" />\n                <TextField source=\"techie_id\" />\n                <TextField source=\"typeform_response_token\" />\n                <JSONField source=\"answers\" />\n                <JSONField source=\"typeform_event\" />\n                <DateField source=\"created_at\" showTime={true}/>\n          </FormTab>\n        </TabbedForm>\n      </SimpleShowLayout>\n  </Show>\n);\n","import * as React from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Edit,\n  SimpleForm,\n  TextInput,\n  Create\n} from 'react-admin';\n\nexport const TeamMemberList = props => (\n    <List {...props} perPage={25}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"first_name\" />\n            <TextField source=\"last_name\" />\n            <TextField source=\"description\" />\n        </Datagrid>\n    </List>\n);\n\nconst TeamMemberTitle = ({ record }) => {\n  if(record && record.first_name && record.last_name) {\n    return <span>Team Member <strong>{record.first_name} {record.last_name}</strong></span>\n  } else if(record && record.id) {\n    return <span>Team Member <strong>{record.id}</strong></span>\n  }\n  return <span>Team Member</span>;\n};\n\nexport const TeamMemberEdit = props => (\n  <Edit title={<TeamMemberTitle />} {...props}>\n      <SimpleForm>\n          <TextInput source=\"first_name\" />\n          <TextInput source=\"last_name\" />\n          <TextInput source=\"email\" />\n          <TextInput source=\"description\" />\n      </SimpleForm>\n  </Edit>\n);\n\nexport const TeamMemberCreate = props => (\n  <Create {...props}>\n    <SimpleForm>\n          <TextInput source=\"first_name\" />\n          <TextInput source=\"last_name\" />\n          <TextInput source=\"email\" />\n          <TextInput source=\"description\" />\n      </SimpleForm>\n  </Create>\n);\n","import React, { Component } from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport UserIcon from '@material-ui/icons/People';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport QueryBuilderIcon from '@material-ui/icons/QueryBuilder';\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\n\nimport dataProvider from './dataProvider';\nimport authProvider from './authProvider';\nimport i18nProvider from './i18nProvider';\nimport LoginPage from './login';\nimport { theme } from './theme';\nimport { TechieList, TechieEdit } from './techies';\nimport { FormList, FormEdit, FormCreate } from './forms';\nimport { SemesterList, SemesterEdit, SemesterCreate } from './semesters';\nimport { FormResponseList, FormResponseShow } from './form_responses';\nimport { TeamMemberList, TeamMemberEdit, TeamMemberCreate } from './team_members';\n\nclass App extends Component {\n  render() {\n      return (\n          <Admin\n            dataProvider={dataProvider}\n            authProvider={authProvider}\n            i18nProvider={i18nProvider}\n            loginPage={LoginPage}\n            theme={theme}\n          >\n            <Resource name=\"techies\" list={TechieList} edit={TechieEdit} icon={UserIcon} />\n            <Resource name=\"forms\" list={FormList} edit={FormEdit} create={FormCreate} icon={ChatBubbleOutlineIcon} />\n            <Resource name=\"form_responses\" list={FormResponseList} show={FormResponseShow} icon={CommentIcon} />\n            <Resource name=\"semesters\" list={SemesterList} edit={SemesterEdit} create={SemesterCreate} icon={QueryBuilderIcon} />\n            <Resource name=\"team_members\" list={TeamMemberList} edit={TeamMemberEdit} create={TeamMemberCreate} icon={PeopleOutlineIcon} />\n          </Admin>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'typeface-nunito-sans'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}