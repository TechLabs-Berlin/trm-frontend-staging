{"version":3,"sources":["config.js","dataProvider.js","authProvider.js","i18nProvider.js","theme.js","login.js","techies.js","forms.js","fields/formSubmissionAnswers.js","fields/json.js","fields/relativeTime.js","form_submissions.js","App.js","serviceWorker.js","index.js"],"names":["clientId","hostedDomain","hasuraProvider","hasToken","localStorage","getItem","buildProvider","token","client","ApolloClient","headers","uri","config","buildFieldsCustom","type","res","buildFields","name","push","gqlTypes","buildQuery","buildQueryFactory","buildVariables","iR","buildGqlQuery","buildMetaArgs","buildArgs","buildApolloArgs","getResponseParser","buildHasuraProvider","a","Promise","reject","authProvider","login","code","request","Request","method","body","JSON","stringify","Headers","fetch","then","response","status","Error","statusText","json","setItem","logout","removeItem","resolve","checkAuth","args","checkError","err","console","log","getPermissions","role","messages","resources","techies","fields","first_name","last_name","techie_key","forms","form_id","imports_techies","form_submissions","englishMessages","polyglotI18nProvider","theme","createMuiTheme","palette","primary","main","LoginPage","notify","useNotify","useLogin","responseGoogle","error","ThemeProvider","className","scope","responseType","onSuccess","onFailure","cookiePolicy","Notification","TechieFilter","props","Filter","TextInput","label","source","alwaysOn","SelectInput","choices","id","TechieList","List","filters","perPage","Datagrid","rowClick","SelectField","TextField","TechieEditToolbar","Toolbar","SaveButton","TechieEdit","Edit","TabbedForm","toolbar","FormTab","ReferenceManyField","reference","target","TechieCreate","Create","SimpleForm","FormFilter","FormList","BooleanField","FormEdit","BooleanInput","DateField","showTime","FormCreate","FormSubmissionAnswersField","record","Object","entries","answers","map","key","answer","ListItem","ListItemIcon","ListItemText","secondary","value","defaultProps","addLabel","JSONField","src","collapsed","collapseStringsAfterLength","RelativeTimeField","fromNow","FormSubmissionFilter","FormSubmissionList","sort","field","order","FormSubmissionShow","Show","SimpleShowLayout","App","Admin","dataProvider","i18nProvider","loginPage","Resource","list","edit","create","icon","UserIcon","ChatBubbleOutlineIcon","show","CommentIcon","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"2aAAe,EACE,gEADF,EAEF,6EAFE,EAGN,CACLA,SAAU,2EACVC,aAAc,gBCcdC,EAAiB,KAEfC,EAAW,kBAAwC,OAAlCC,aAAaC,QAAQ,UAEtCC,EAAgB,WACpB,IAAMC,EAAQH,aAAaC,QAAQ,SAC7BG,EAAS,IAAIC,IAAa,CAC9BC,QAAS,CACP,cAAgB,UAAhB,OAA2BH,IAE7BI,IAAKC,IAEDC,EAAoB,SAACC,GACzB,IAAIC,EAAMC,YAAYF,GA4BtB,MA3BkB,qBAAdA,EAAKG,OAGLF,EAAIG,KACAC,QACIA,OAAc,QACd,KACA,KACA,KACAA,eAAsB,CAClBA,QAAeA,OAAc,oBAIzCJ,EAAIG,KACFC,QACIA,OAAc,UACd,KACA,KACA,KACAA,eAAsB,CAClBA,QAAeA,OAAc,eAC7BA,QAAeA,OAAc,mBAKpCJ,GAUHK,EAAaC,YACjBC,KAT0B,SAACC,GAAD,OAC1BC,YACED,EACAV,EACAY,IACAC,IACAC,OAKFC,KAEF,OAAOC,YAAoB,CACzBrB,SACAY,gBAIJ,wBAAe,sCAAAU,EAAA,yDACU,OAAnB5B,IAA2BC,IADlB,gCAEYG,IAFZ,OAEXJ,EAFW,iBAIU,OAAnBA,EAJS,yCAKJA,EAAc,WAAd,MALI,gCAON6B,QAAQC,OAAO,kBAPT,2CC5CAC,EAnCM,CACnBC,MAAO,YAAgB,IAAbC,EAAY,EAAZA,KACAC,EAAU,IAAIC,QAAQzB,EAAkB,CAC1C0B,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEN,SACvBzB,QAAS,IAAIgC,QAAQ,CAAE,eAAgB,uBAE3C,OAAOC,MAAMP,GACRQ,MAAK,SAAAC,GACF,GAAIA,EAASC,OAAS,KAAOD,EAASC,QAAU,IAC5C,MAAM,IAAIC,MAAMF,EAASG,YAE7B,OAAOH,EAASI,UAEnBL,MAAK,YAAgB,IAAbrC,EAAY,EAAZA,MACLH,aAAa8C,QAAQ,QAAS3C,OAG1C4C,OAAQ,WAEN,OADA/C,aAAagD,WAAW,SACjBrB,QAAQsB,WAEjBC,UAAW,SAACC,GACV,OAAOnD,aAAaC,QAAQ,SAAW0B,QAAQsB,UAAYtB,QAAQC,UAErEwB,WAAY,SAACC,GAEX,OADAC,QAAQC,IAAR,sBAA2BF,IACpB1B,QAAQsB,WAEjBO,eAAgB,WACd,IAAMC,EAAOzD,aAAaC,QAAQ,eAClC,OAAOwD,EAAO9B,QAAQsB,QAAQQ,GAAQ9B,QAAQC,W,0BC9B9C8B,EAAQ,aACVC,UAAW,CACTC,QAAS,CACPC,OAAQ,CACNC,WAAY,aACZC,UAAW,YACXC,WAAY,eAGhBC,MAAO,CACLJ,OAAQ,CACNK,QAAS,mBACTC,gBAAiB,qBAGrBC,iBAAkB,CAChBvD,KAAM,wCACNgD,OAAQ,CACN,mBAAoB,OACpB,oBAAqB,aACrB,mBAAoB,gBAIvBQ,KAGUC,eAAqB,kBAAMZ,K,sDC5B7Ba,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAAS,CACPC,KAAM,cCiCGC,EA9BG,WACd,IAAMC,EAASC,cACThD,EAAQiD,cACRC,EAAiB,SAACvC,GACjB,SAAUA,EACTX,EAAM,CAAEC,KAAMU,EAASV,QAG3BuB,QAAQ2B,MAAMxC,GACdoC,EAAO,gCAGX,OACI,gBAACK,EAAA,EAAD,CAAeX,MAAOA,GAClB,uBAAKY,UAAU,0BACX,gBAAC,cAAD,CACIvF,SAAUY,EAAaZ,SACvBC,aAAcW,EAAaX,aAC3BuF,MAAM,+EACNC,aAAa,OACbC,UAAWN,EACXO,UAAWP,EACXQ,aAAc,wBAGtB,gBAACC,EAAA,EAAD,Q,2JCdNC,GAAe,SAACC,GAAD,OACnB,gBAACC,EAAA,EAAWD,EACR,gBAACE,EAAA,EAAD,CAAWC,MAAM,SAASC,OAAO,aAAaC,UAAQ,IACtD,gBAACH,EAAA,EAAD,CAAWE,OAAO,UAClB,gBAACE,EAAA,EAAD,CAAaF,OAAO,WAAWG,QAAS,CACtC,CAAEC,GAAI,YAAatF,KAAM,WACzB,CAAEsF,GAAI,YAAatF,KAAM,cAE3B,gBAACoF,EAAA,EAAD,CAAaF,OAAO,QAAQG,QAAS,CACnC,CAAEC,GAAI,WAAYtF,KAAM,YACxB,CAAEsF,GAAI,YAAatF,KAAM,aACzB,CAAEsF,GAAI,WAAYtF,KAAM,YACxB,CAAEsF,GAAI,UAAWtF,KAAM,WACvB,CAAEsF,GAAI,UAAWtF,KAAM,WACvB,CAAEsF,GAAI,SAAUtF,KAAM,eAKjBuF,GAAa,SAAAT,GAAK,OAC3B,gBAACU,EAAA,EAAD,iBAAUV,EAAV,CAAiBW,QAAS,gBAAC,GAAD,MAAkBC,QAAS,KACjD,gBAACC,GAAA,EAAD,CAAUC,SAAS,QACf,gBAACC,GAAA,EAAD,CAAaX,OAAO,WAAWG,QAAS,CACtC,CAAEC,GAAI,YAAatF,KAAM,WACzB,CAAEsF,GAAI,YAAatF,KAAM,cAE3B,gBAAC6F,GAAA,EAAD,CAAaX,OAAO,QAAQG,QAAS,CACnC,CAAEC,GAAI,WAAYtF,KAAM,YACxB,CAAEsF,GAAI,YAAatF,KAAM,aACzB,CAAEsF,GAAI,WAAYtF,KAAM,YACxB,CAAEsF,GAAI,UAAWtF,KAAM,WACvB,CAAEsF,GAAI,UAAWtF,KAAM,WACvB,CAAEsF,GAAI,SAAUtF,KAAM,aAExB,gBAAC8F,GAAA,EAAD,CAAWZ,OAAO,eAClB,gBAACY,GAAA,EAAD,CAAWZ,OAAO,iBAKxBa,GAAoB,SAAAjB,GAAK,OAC7B,gBAACkB,GAAA,EAAYlB,EACT,gBAACmB,GAAA,EAAD,QAKOC,GAAa,SAAApB,GAAK,OAC7B,gBAACqB,GAAA,EAASrB,EACN,gBAACsB,GAAA,EAAD,CAAYC,QAAS,gBAAC,GAAD,OACjB,gBAACC,GAAA,EAAD,CAASrB,MAAM,eACb,gBAACG,EAAA,EAAD,CAAaF,OAAO,WAAWG,QAAS,CACtC,CAAEC,GAAI,YAAatF,KAAM,WACzB,CAAEsF,GAAI,YAAatF,KAAM,cAE3B,gBAACoF,EAAA,EAAD,CAAaF,OAAO,QAAQG,QAAS,CACnC,CAAEC,GAAI,WAAYtF,KAAM,YACxB,CAAEsF,GAAI,YAAatF,KAAM,aACzB,CAAEsF,GAAI,WAAYtF,KAAM,YACxB,CAAEsF,GAAI,UAAWtF,KAAM,WACvB,CAAEsF,GAAI,UAAWtF,KAAM,WACvB,CAAEsF,GAAI,SAAUtF,KAAM,aAExB,gBAACgF,EAAA,EAAD,CAAWE,OAAO,eAClB,gBAACF,EAAA,EAAD,CAAWE,OAAO,cAClB,gBAACF,EAAA,EAAD,CAAWE,OAAO,UAClB,gBAACY,GAAA,EAAD,CAAWZ,OAAO,gBAEpB,gBAACoB,GAAA,EAAD,CAASrB,MAAM,oBACb,gBAACsB,GAAA,EAAD,CAAoBtB,MAAM,6BAA6BuB,UAAU,mBAAmBC,OAAO,aACzF,gBAACd,GAAA,EAAD,CAAUC,SAAS,QACjB,gBAACE,GAAA,EAAD,CAAWb,MAAM,mBAAmBC,OAAO,qBAC3C,gBAACY,GAAA,EAAD,CAAWb,MAAM,wBAAwBC,OAAO,qBAQnDwB,GAAe,SAAA5B,GAAK,OAC/B,gBAAC6B,GAAA,EAAW7B,EACV,gBAAC8B,GAAA,EAAD,KACM,gBAACxB,EAAA,EAAD,CAAaF,OAAO,WAAWG,QAAS,CACtC,CAAEC,GAAI,YAAatF,KAAM,WACzB,CAAEsF,GAAI,YAAatF,KAAM,cAE3B,gBAACoF,EAAA,EAAD,CAAaF,OAAO,QAAQG,QAAS,CACnC,CAAEC,GAAI,WAAYtF,KAAM,YACxB,CAAEsF,GAAI,YAAatF,KAAM,aACzB,CAAEsF,GAAI,WAAYtF,KAAM,YACxB,CAAEsF,GAAI,UAAWtF,KAAM,WACvB,CAAEsF,GAAI,UAAWtF,KAAM,WACvB,CAAEsF,GAAI,SAAUtF,KAAM,aAExB,gBAACgF,EAAA,EAAD,CAAWE,OAAO,UAClB,gBAACF,EAAA,EAAD,CAAWE,OAAO,kB,iCChHtB2B,GAAa,SAAC/B,GAAD,OACjB,gBAACC,EAAA,EAAWD,EACR,gBAACE,EAAA,EAAD,CAAWC,MAAM,SAASC,OAAO,cAAcC,UAAQ,IACvD,gBAACH,EAAA,EAAD,CAAWE,OAAO,cAIX4B,GAAW,SAAAhC,GAAK,OACzB,gBAACU,EAAA,EAAD,iBAAUV,EAAV,CAAiBW,QAAS,gBAAC,GAAD,MAAgBC,QAAS,KAC/C,gBAACC,GAAA,EAAD,CAAUC,SAAS,QACf,gBAACE,GAAA,EAAD,CAAWZ,OAAO,YAClB,gBAACY,GAAA,EAAD,CAAWZ,OAAO,gBAClB,gBAAC6B,GAAA,EAAD,CAAc7B,OAAO,uBAKpB8B,GAAW,SAAAlC,GAAK,OAC3B,gBAACqB,GAAA,EAASrB,EACN,gBAAC8B,GAAA,EAAD,KACI,gBAAC5B,EAAA,EAAD,CAAWE,OAAO,YAClB,gBAACE,EAAA,EAAD,CAAaF,OAAO,WAAWG,QAAS,CACtC,CAAEC,GAAI,YAAatF,KAAM,WACzB,CAAEsF,GAAI,YAAatF,KAAM,cAE3B,gBAACgF,EAAA,EAAD,CAAWE,OAAO,gBAClB,gBAAC+B,GAAA,EAAD,CAAc/B,OAAO,oBACrB,gBAACgC,GAAA,EAAD,CAAWhC,OAAO,uBAAuBiC,UAAU,OAKhDC,GAAa,SAAAtC,GAAK,OAC7B,gBAAC6B,GAAA,EAAW7B,EACV,gBAAC8B,GAAA,EAAD,KACM,gBAAC5B,EAAA,EAAD,CAAWE,OAAO,YAClB,gBAACE,EAAA,EAAD,CAAaF,OAAO,WAAWG,QAAS,CACtC,CAAEC,GAAI,YAAatF,KAAM,WACzB,CAAEsF,GAAI,YAAatF,KAAM,cAE3B,gBAACgF,EAAA,EAAD,CAAWE,OAAO,gBAClB,gBAAC+B,GAAA,EAAD,CAAc/B,OAAO,oBACrB,gBAACgC,GAAA,EAAD,CAAWhC,OAAO,4B,+FCtCfmC,GAA6B,SAAC,GAAoB,IAAD,IAAjBC,cAAiB,MAAR,GAAQ,EAC5D,OACE,gBAAC,KAAD,KACGC,OAAOC,QAAQF,EAAOG,SAASC,KAAI,YAAoB,IAAD,oBAAjBC,EAAiB,KAAZC,EAAY,KACrD,OACE,gBAACC,GAAA,EAAD,CAAUF,IAAKA,GACb,gBAACG,GAAA,EAAD,KACE,gBAAC,KAAD,OAEF,gBAACC,GAAA,EAAD,CAAclE,QAAS8D,EAAKK,UAAW,4BAAOJ,EAAOK,eAQjEZ,GAA2Ba,aAAe,CACxCC,UAAU,G,yBCrBCC,GAAY,SAAC,GAA6B,IAA3BlD,EAA0B,EAA1BA,OAA0B,IAAlBoC,cAAkB,MAAT,GAAS,EACpD,OAAO,gBAAC,KAAD,CACLe,IAAKf,EAAOpC,GACZoD,UAAW,EACXC,2BAA4B,MAUhCH,GAAUF,aAAe,CACvBC,UAAU,G,yBCfCK,GAAoB,SAAC,GAA6B,IAA3BtD,EAA0B,EAA1BA,OAA0B,IAAlBoC,cAAkB,MAAT,GAAS,EAC5D,OAAO,gBAAC,KAAD,CAAQmB,SAAO,GAAEnB,EAAOpC,KASjCsD,GAAkBN,aAAe,CACjCC,UAAU,GCEV,IAAMO,GAAuB,SAAC5D,GAAD,OAC3B,gBAACC,EAAA,EAAWD,EACR,gBAACE,EAAA,EAAD,CAAWC,MAAM,oBAAoBC,OAAO,UAAUC,UAAQ,IAC9D,gBAACH,EAAA,EAAD,CAAWE,OAAO,8BAIXyD,GAAqB,SAAA7D,GAAK,OACnC,gBAACU,EAAA,EAAD,iBAAUV,EAAV,CAAiBW,QAAS,gBAAC,GAAD,MAA0BC,QAAS,GAAIkD,KAAM,CAAEC,MAAO,aAAcC,MAAO,UACjG,gBAACnD,GAAA,EAAD,CAAUC,SAAS,QACf,gBAACE,GAAA,EAAD,CAAWZ,OAAO,qBAClB,gBAACY,GAAA,EAAD,CAAWZ,OAAO,sBAClB,gBAACY,GAAA,EAAD,CAAWZ,OAAO,qBAClB,gBAAC,GAAD,CAAmBA,OAAO,kBAKzB6D,GAAqB,SAAAjE,GAAK,OACrC,gBAACkE,GAAA,EAASlE,EACN,gBAACmE,GAAA,EAAD,KACE,gBAAC7C,GAAA,EAAD,CAAYC,QAAS,MACjB,gBAACC,GAAA,EAAD,CAASrB,MAAM,WACX,gBAACiC,GAAA,EAAD,CAAWhC,OAAO,aAAaiC,UAAU,IACzC,gBAAC,GAAD,CAA4BlC,MAAM,aAEtC,gBAACqB,GAAA,EAAD,CAASrB,MAAM,WACX,gBAACa,GAAA,EAAD,CAAWZ,OAAO,YAClB,gBAACY,GAAA,EAAD,CAAWZ,OAAO,cAClB,gBAACY,GAAA,EAAD,CAAWZ,OAAO,4BAClB,gBAAC,GAAD,CAAWA,OAAO,YAClB,gBAAC,GAAD,CAAWA,OAAO,mBAClB,gBAACgC,GAAA,EAAD,CAAWhC,OAAO,aAAaiC,UAAU,SChB1C+B,G,uKAhBT,OACI,kBAACC,EAAA,EAAD,CACEC,aAAcA,EACdpI,aAAcA,EACdqI,aAAcA,EACdC,UAAWvF,EACXL,MAAOA,GAEP,kBAAC6F,EAAA,EAAD,CAAUvJ,KAAK,UAAUwJ,KAAMjE,GAAYkE,KAAMvD,GAAYwD,OAAQhD,GAAciD,KAAMC,MACzF,kBAACL,EAAA,EAAD,CAAUvJ,KAAK,QAAQwJ,KAAM1C,GAAU2C,KAAMzC,GAAU0C,OAAQtC,GAAYuC,KAAME,MACjF,kBAACN,EAAA,EAAD,CAAUvJ,KAAK,mBAAmBwJ,KAAMb,GAAoBmB,KAAMf,GAAoBY,KAAMI,W,GAZtFC,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlJ,MAAK,SAAAmJ,GACJA,EAAaC,gBAEdC,OAAM,SAAA5G,GACL3B,QAAQ2B,MAAMA,EAAM6G,c","file":"static/js/main.de834247.chunk.js","sourcesContent":["export default {\n  graphqlApiURL: 'https://trm-staging-hasura-xwaitoan6a-ew.a.run.app/v1/graphql',\n  authFnURL: 'https://europe-west3-techlabs-trm-test.cloudfunctions.net/trm-auth-staging',\n  oAuth: {\n    clientId: '982186032389-28u4o2ui0up26vtp6ajp4ce7kqd69p7v.apps.googleusercontent.com',\n    hostedDomain: 'techlabs.org'\n  }\n}\n","import ApolloClient from 'apollo-boost'\nimport buildHasuraProvider from 'ra-data-hasura-graphql/src'\n// import buildDataProvider from 'ra-data-hasura-graphql';\nimport {\n  buildQueryFactory\n} from 'ra-data-hasura-graphql/src/buildQuery';\nimport buildVariables from 'ra-data-hasura-graphql/src/buildVariables';\nimport {\n  buildGqlQuery,\n  buildFields,\n  buildMetaArgs,\n  buildArgs,\n  buildApolloArgs,\n} from 'ra-data-hasura-graphql/src/buildGqlQuery';\nimport getResponseParser from 'ra-data-hasura-graphql/src/getResponseParser';\nimport * as gqlTypes from 'graphql-ast-types-browser';\n\nimport config from './config'\n\nlet hasuraProvider = null\n\nconst hasToken = () => localStorage.getItem('token') !== null\n\nconst buildProvider = () => {\n  const token = localStorage.getItem('token')\n  const client = new ApolloClient({\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    uri: config.graphqlApiURL,\n  })\n  const buildFieldsCustom = (type) => {\n    let res = buildFields(type);\n    if (type.name === 'form_submissions') {\n        // here we add additional fields we want to query for apps.\n        // we are using the graphql-ast-types functions which is ast representation for graphql\n        res.push(\n            gqlTypes.field(\n                gqlTypes.name('form'),\n                null,\n                null,\n                null,\n                gqlTypes.selectionSet([\n                    gqlTypes.field(gqlTypes.name('description')),\n                ])\n            )\n        );\n        res.push(\n          gqlTypes.field(\n              gqlTypes.name('techie'),\n              null,\n              null,\n              null,\n              gqlTypes.selectionSet([\n                  gqlTypes.field(gqlTypes.name('first_name')),\n                  gqlTypes.field(gqlTypes.name('last_name')),\n              ])\n          )\n      );\n    }\n    return res;\n  };\n  const buildGqlQueryCustom = (iR) =>\n    buildGqlQuery(\n      iR,\n      buildFieldsCustom,\n      buildMetaArgs,\n      buildArgs,\n      buildApolloArgs\n    );\n  const buildQuery = buildQueryFactory(\n    buildVariables,\n    buildGqlQueryCustom,\n    getResponseParser\n  );\n  return buildHasuraProvider({\n    client,\n    buildQuery\n  })\n}\n\nexport default async (...args) => {\n  if (hasuraProvider === null && hasToken()) {\n    hasuraProvider = await buildProvider()\n  }\n  if (hasuraProvider !== null) {\n    return hasuraProvider(...args)\n  }\n  return Promise.reject('not logged in')\n}\n","import config from './config'\n\nconst authProvider = {\n  login: ({ code }) =>  {\n      const request = new Request(config.authFnURL, {\n          method: 'POST',\n          body: JSON.stringify({ code }),\n          headers: new Headers({ 'Content-Type': 'application/json' }),\n      });\n      return fetch(request)\n          .then(response => {\n              if (response.status < 200 || response.status >= 300) {\n                  throw new Error(response.statusText);\n              }\n              return response.json();\n          })\n          .then(({ token }) => {\n              localStorage.setItem('token', token);\n          });\n  },\n  logout: () => {\n    localStorage.removeItem('token')\n    return Promise.resolve()\n  },\n  checkAuth: (args) => {\n    return localStorage.getItem('token') ? Promise.resolve() : Promise.reject()\n  },\n  checkError: (err) => {\n    console.log(`checkError: ${err}`)\n    return Promise.resolve()\n  },\n  getPermissions: () => {\n    const role = localStorage.getItem('permissions');\n    return role ? Promise.resolve(role) : Promise.reject();\n  }\n};\n\nexport default authProvider;\n","import englishMessages from 'ra-language-english';\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\n\nlet messages = {\n  resources: {\n    techies: {\n      fields: {\n        first_name: 'First Name',\n        last_name: 'Last Name',\n        techie_key: 'Techie Key'\n      }\n    },\n    forms: {\n      fields: {\n        form_id: 'Typeform Form ID',\n        imports_techies: 'Imports Techies?'\n      }\n    },\n    form_submissions: {\n      name: 'Form Submission |||| Form Submissions',\n      fields: {\n        'form.description': 'Form',\n        'techie.first_name': 'First Name',\n        'techie.last_name': 'Last Name'\n      }\n    }\n  },\n  ...englishMessages\n};\n\nexport default polyglotI18nProvider(() => messages)\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#fb1d5c'\n    }\n  }\n});\n","import * as React from 'react';\nimport { useLogin, useNotify, Notification } from 'react-admin';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { GoogleLogin } from 'react-google-login';\n\nimport { theme } from './theme'\nimport config from './config'\n\nconst LoginPage = () => {\n    const notify = useNotify();\n    const login = useLogin();\n    const responseGoogle = (response) => {\n        if('code' in response) {\n            login({ code: response.code })\n            return\n        }\n        console.error(response)\n        notify('Sign in with Google failed')\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"google-login-container\">\n                <GoogleLogin\n                    clientId={config.oAuth.clientId}\n                    hostedDomain={config.oAuth.hostedDomain}\n                    scope=\"profile email https://www.googleapis.com/auth/admin.directory.group.readonly\"\n                    responseType=\"code\"\n                    onSuccess={responseGoogle}\n                    onFailure={responseGoogle}\n                    cookiePolicy={'single_host_origin'}\n                />\n            </div>\n            <Notification />\n        </ThemeProvider>\n    );\n};\n\nexport default LoginPage;\n","import * as React from \"react\";\nimport {\n  Filter,\n  List,\n  Datagrid,\n  SelectField,\n  TextField,\n  Edit,\n  SimpleForm,\n  TabbedForm,\n  FormTab,\n  ReferenceManyField,\n  TextInput,\n  SelectInput,\n  Create,\n  Toolbar,\n  SaveButton\n} from 'react-admin';\n\nconst TechieFilter = (props) => (\n  <Filter {...props}>\n      <TextInput label=\"Search\" source=\"techie_key\" alwaysOn />\n      <TextInput source=\"email\" />\n      <SelectInput source=\"semester\" choices={[\n        { id: 'S_2020_01', name: '2020-01' },\n        { id: 'S_2020_02', name: '2020-02' },\n      ]} />\n      <SelectInput source=\"state\" choices={[\n        { id: 'PROSPECT', name: 'Prospect' },\n        { id: 'APPLICANT', name: 'Applicant' },\n        { id: 'REJECTED', name: 'Rejected' },\n        { id: 'LEARNER', name: 'Learner' },\n        { id: 'DROPPED', name: 'Dropped' },\n        { id: 'ALUMNI', name: 'Alumni' },\n      ]} />\n  </Filter>\n);\n\nexport const TechieList = props => (\n    <List {...props} filters={<TechieFilter />} perPage={25}>\n        <Datagrid rowClick=\"edit\">\n            <SelectField source=\"semester\" choices={[\n              { id: 'S_2020_01', name: '2020-01' },\n              { id: 'S_2020_02', name: '2020-02' },\n            ]} />\n            <SelectField source=\"state\" choices={[\n              { id: 'PROSPECT', name: 'Prospect' },\n              { id: 'APPLICANT', name: 'Applicant' },\n              { id: 'REJECTED', name: 'Rejected' },\n              { id: 'LEARNER', name: 'Learner' },\n              { id: 'DROPPED', name: 'Dropped' },\n              { id: 'ALUMNI', name: 'Alumni' },\n            ]} />\n            <TextField source=\"first_name\" />\n            <TextField source=\"last_name\" />\n        </Datagrid>\n    </List>\n);\n\nconst TechieEditToolbar = props => (\n  <Toolbar {...props} >\n      <SaveButton />\n  </Toolbar>\n);\n\n\nexport const TechieEdit = props => (\n  <Edit {...props}>\n      <TabbedForm toolbar={<TechieEditToolbar />}>\n          <FormTab label=\"Master Data\">\n            <SelectInput source=\"semester\" choices={[\n              { id: 'S_2020_01', name: '2020-01' },\n              { id: 'S_2020_02', name: '2020-02' },\n            ]} />\n            <SelectInput source=\"state\" choices={[\n              { id: 'PROSPECT', name: 'Prospect' },\n              { id: 'APPLICANT', name: 'Applicant' },\n              { id: 'REJECTED', name: 'Rejected' },\n              { id: 'LEARNER', name: 'Learner' },\n              { id: 'DROPPED', name: 'Dropped' },\n              { id: 'ALUMNI', name: 'Alumni' },\n            ]} />\n            <TextInput source=\"first_name\" />\n            <TextInput source=\"last_name\" />\n            <TextInput source=\"email\" />\n            <TextField source=\"techie_key\" />\n          </FormTab>\n          <FormTab label=\"Form Submissions\">\n            <ReferenceManyField label=\"Form Submissions by Techie\" reference=\"form_submissions\" target=\"techie_id\">\n              <Datagrid rowClick=\"show\">\n                <TextField label=\"Form Description\" source=\"form.description\" />\n                <TextField label=\"Submission created at\" source=\"created_at\" />\n              </Datagrid>\n            </ReferenceManyField>\n          </FormTab>\n      </TabbedForm>\n  </Edit>\n);\n\nexport const TechieCreate = props => (\n  <Create {...props}>\n    <SimpleForm>\n          <SelectInput source=\"semester\" choices={[\n            { id: 'S_2020_01', name: '2020-01' },\n            { id: 'S_2020_02', name: '2020-02' },\n          ]} />\n          <SelectInput source=\"state\" choices={[\n            { id: 'PROSPECT', name: 'Prospect' },\n            { id: 'APPLICANT', name: 'Applicant' },\n            { id: 'REJECTED', name: 'Rejected' },\n            { id: 'LEARNER', name: 'Learner' },\n            { id: 'DROPPED', name: 'Dropped' },\n            { id: 'ALUMNI', name: 'Alumni' },\n          ]} />\n          <TextInput source=\"email\" />\n          <TextInput source=\"techie_key\" />\n      </SimpleForm>\n  </Create>\n);\n","import * as React from \"react\";\nimport { Filter, List, Datagrid, DateField, TextField, BooleanField, Edit, SimpleForm, TextInput, BooleanInput, SelectInput, Create } from 'react-admin';\n\nconst FormFilter = (props) => (\n  <Filter {...props}>\n      <TextInput label=\"Search\" source=\"description\" alwaysOn />\n      <TextInput source=\"form_id\" />\n  </Filter>\n);\n\nexport const FormList = props => (\n    <List {...props} filters={<FormFilter />} perPage={25}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"form_id\" />\n            <TextField source=\"description\" />\n            <BooleanField source=\"imports_techies\" />\n        </Datagrid>\n    </List>\n);\n\nexport const FormEdit = props => (\n  <Edit {...props}>\n      <SimpleForm>\n          <TextInput source=\"form_id\" />\n          <SelectInput source=\"semester\" choices={[\n            { id: 'S_2020_01', name: '2020-01' },\n            { id: 'S_2020_02', name: '2020-02' },\n          ]} />\n          <TextInput source=\"description\" />\n          <BooleanInput source=\"imports_techies\" />\n          <DateField source=\"webhook_installed_at\" showTime={true} />\n      </SimpleForm>\n  </Edit>\n);\n\nexport const FormCreate = props => (\n  <Create {...props}>\n    <SimpleForm>\n          <TextInput source=\"form_id\" />\n          <SelectInput source=\"semester\" choices={[\n            { id: 'S_2020_01', name: '2020-01' },\n            { id: 'S_2020_02', name: '2020-02' },\n          ]} />\n          <TextInput source=\"description\" />\n          <BooleanInput source=\"imports_techies\" />\n          <DateField source=\"webhook_installed_at\" />\n      </SimpleForm>\n  </Create>\n);\n","import * as React from \"react\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\n\nexport const FormSubmissionAnswersField = ({ record = {}}) => {\n  return (\n    <List>\n      {Object.entries(record.answers).map(([key, answer]) => {\n        return (\n          <ListItem key={key}>\n            <ListItemIcon>\n              <ArrowRightIcon />\n            </ListItemIcon>\n            <ListItemText primary={key} secondary={<span>{answer.value}</span>} />\n          </ListItem>\n        )\n      })}\n    </List>\n  )\n}\n\nFormSubmissionAnswersField.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport ReactJson from 'react-json-view'\n\nexport const JSONField = ({ source, record = {} }) => {\n  return <ReactJson\n    src={record[source]}\n    collapsed={2}\n    collapseStringsAfterLength={60}\n  />\n}\n\nJSONField.propTypes = {\n    label: PropTypes.string,\n    record: PropTypes.object,\n    source: PropTypes.string.isRequired,\n};\n\nJSONField.defaultProps = {\n  addLabel: true\n}\n","import * as React from \"react\";\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\n\nexport const RelativeTimeField = ({ source, record = {} }) => {\n  return <Moment fromNow>{record[source]}</Moment>\n}\n\nRelativeTimeField.propTypes = {\n  label: PropTypes.string,\n  record: PropTypes.object,\n  source: PropTypes.string.isRequired,\n};\n\nRelativeTimeField.defaultProps = {\naddLabel: true\n}\n","import * as React from \"react\";\nimport {\n    Filter,\n    List,\n    Datagrid,\n    TextField,\n    TextInput,\n    Show,\n    SimpleShowLayout,\n    TabbedForm,\n    FormTab,\n    DateField\n} from 'react-admin';\nimport { FormSubmissionAnswersField } from './fields/formSubmissionAnswers';\nimport { JSONField } from './fields/json'\nimport { RelativeTimeField } from './fields/relativeTime'\n\nconst FormSubmissionFilter = (props) => (\n  <Filter {...props}>\n      <TextInput label=\"Search by form_id\" source=\"form_id\" alwaysOn />\n      <TextInput source=\"typeform_response_token\" />\n  </Filter>\n);\n\nexport const FormSubmissionList = props => (\n    <List {...props} filters={<FormSubmissionFilter />} perPage={25} sort={{ field: 'created_at', order: 'DESC' }}>\n        <Datagrid rowClick=\"show\">\n            <TextField source=\"form.description\" />\n            <TextField source=\"techie.first_name\" />\n            <TextField source=\"techie.last_name\" />\n            <RelativeTimeField source=\"created_at\" />\n        </Datagrid>\n    </List>\n);\n\nexport const FormSubmissionShow = props => (\n  <Show {...props}>\n      <SimpleShowLayout>\n        <TabbedForm toolbar={null}>\n            <FormTab label=\"Answers\">\n                <DateField source=\"created_at\" showTime={true}/>\n                <FormSubmissionAnswersField label=\"Answers\" />\n            </FormTab>\n            <FormTab label=\"Details\">\n                <TextField source=\"form_id\" />\n                <TextField source=\"techie_id\" />\n                <TextField source=\"typeform_response_token\" />\n                <JSONField source=\"answers\" />\n                <JSONField source=\"typeform_event\" />\n                <DateField source=\"created_at\" showTime={true}/>\n          </FormTab>\n        </TabbedForm>\n      </SimpleShowLayout>\n  </Show>\n);\n","import React, { Component } from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport UserIcon from '@material-ui/icons/People';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport CommentIcon from '@material-ui/icons/Comment';\n\nimport dataProvider from './dataProvider';\nimport authProvider from './authProvider';\nimport i18nProvider from './i18nProvider';\nimport LoginPage from './login';\nimport { theme } from './theme';\nimport { TechieList, TechieEdit, TechieCreate } from './techies';\nimport { FormList, FormEdit, FormCreate } from './forms';\nimport { FormSubmissionList, FormSubmissionShow } from './form_submissions';\n\nclass App extends Component {\n  render() {\n      return (\n          <Admin\n            dataProvider={dataProvider}\n            authProvider={authProvider}\n            i18nProvider={i18nProvider}\n            loginPage={LoginPage}\n            theme={theme}\n          >\n            <Resource name=\"techies\" list={TechieList} edit={TechieEdit} create={TechieCreate} icon={UserIcon} />\n            <Resource name=\"forms\" list={FormList} edit={FormEdit} create={FormCreate} icon={ChatBubbleOutlineIcon} />\n            <Resource name=\"form_submissions\" list={FormSubmissionList} show={FormSubmissionShow} icon={CommentIcon} />\n          </Admin>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}