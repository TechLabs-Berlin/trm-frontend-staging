{"version":3,"sources":["config.js","dataProvider.js","authProvider.js","theme.js","login.js","techies.js","App.js","serviceWorker.js","index.js"],"names":["clientId","hostedDomain","hasuraProvider","hasToken","localStorage","getItem","buildProvider","token","client","ApolloClient","headers","uri","config","buildHasuraProvider","a","Promise","reject","authProvider","login","code","request","Request","method","body","JSON","stringify","Headers","fetch","then","response","status","Error","statusText","json","setItem","logout","removeItem","resolve","checkAuth","args","checkError","err","console","log","getPermissions","role","theme","createMuiTheme","palette","type","LoginPage","notify","useNotify","useLogin","responseGoogle","error","ThemeProvider","className","scope","responseType","onSuccess","onFailure","cookiePolicy","Notification","TechieFilter","props","Filter","TextInput","label","source","alwaysOn","SelectInput","choices","id","name","TechieList","List","filters","Datagrid","rowClick","EmailField","SelectField","TechieEdit","Edit","SimpleForm","TechieCreate","Create","App","Admin","dataProvider","loginPage","Resource","list","edit","create","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b0b6b052.chunk.js","sourcesContent":["export default {\n  graphqlApiURL: 'https://trm-staging-hasura-xwaitoan6a-ew.a.run.app',\n  authFnURL: 'https://europe-west3-techlabs-trm-test.cloudfunctions.net/trm-auth',\n  oAuth: {\n    clientId: '737065308340-9168dm0hd3e2m4r3msh0ceukd2o9ii15.apps.googleusercontent.com',\n    hostedDomain: 'seidel.me'\n  }\n}\n","import ApolloClient from 'apollo-boost'\nimport buildHasuraProvider from 'ra-data-hasura-graphql'\n\nimport config from './config'\n\nlet hasuraProvider = null\n\nconst hasToken = () => localStorage.getItem('token') !== null\n\nconst buildProvider = () => {\n  const token = localStorage.getItem('token')\n  const client = new ApolloClient({\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      uri: config.graphqlApiURL,\n  })\n  return buildHasuraProvider({ client })\n}\n\nexport default async (...args) => {\n  if(hasuraProvider === null && hasToken()) {\n    hasuraProvider = await buildProvider()\n  }\n  if(hasuraProvider !== null) {\n    return hasuraProvider(...args)\n  }\n  return Promise.reject('not logged in')\n}\n","import config from './config'\n\nconst authProvider = {\n  login: ({ code }) =>  {\n      const request = new Request(config.authFnURL, {\n          method: 'POST',\n          body: JSON.stringify({ code }),\n          headers: new Headers({ 'Content-Type': 'application/json' }),\n      });\n      return fetch(request)\n          .then(response => {\n              if (response.status < 200 || response.status >= 300) {\n                  throw new Error(response.statusText);\n              }\n              return response.json();\n          })\n          .then(({ token }) => {\n              localStorage.setItem('token', token);\n          });\n  },\n  logout: () => {\n    localStorage.removeItem('token')\n    return Promise.resolve()\n  },\n  checkAuth: (args) => {\n    return localStorage.getItem('token') ? Promise.resolve() : Promise.reject()\n  },\n  checkError: (err) => {\n    console.log(`checkError: ${err}`)\n    return Promise.resolve()\n  },\n  getPermissions: () => {\n    console.log('getPermissions')\n    const role = localStorage.getItem('permissions');\n    return role ? Promise.resolve(role) : Promise.reject();\n  }\n};\n\nexport default authProvider;\n","import { createMuiTheme } from '@material-ui/core/styles';\nexport const theme = createMuiTheme({\n  palette: {\n    type: 'light',\n  },\n});\n","import * as React from 'react';\nimport { useLogin, useNotify, Notification } from 'react-admin';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { GoogleLogin } from 'react-google-login';\n\nimport { theme } from './theme'\nimport config from './config'\n\nconst LoginPage = () => {\n    const notify = useNotify();\n    const login = useLogin();\n    const responseGoogle = (response) => {\n        if('code' in response) {\n            login({ code: response.code })\n            return\n        }\n        console.error(response)\n        notify('Sign in with Google failed')\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"google-login-container\">\n                <GoogleLogin\n                    clientId={config.oAuth.clientId}\n                    hostedDomain={config.oAuth.hostedDomain}\n                    scope=\"profile email https://www.googleapis.com/auth/admin.directory.group.readonly\"\n                    responseType=\"code\"\n                    onSuccess={responseGoogle}\n                    onFailure={responseGoogle}\n                    cookiePolicy={'single_host_origin'}\n                />\n            </div>\n            <Notification />\n        </ThemeProvider>\n    );\n};\n\nexport default LoginPage;\n","import * as React from \"react\";\nimport { Filter, List, Datagrid, EmailField, SelectField, Edit, SimpleForm, TextInput, SelectInput, Create } from 'react-admin';\n\nconst TechieFilter = (props) => (\n  <Filter {...props}>\n      <TextInput label=\"Search\" source=\"email\" alwaysOn />\n      <SelectInput source=\"location\" choices={[\n                  { id: 'BERLIN', name: 'Berlin' },\n                ]} />\n      <SelectInput source=\"semester\" choices={[\n        { id: 'S_2020_01', name: '2020-01' },\n      ]} />\n      <SelectInput source=\"state\" choices={[\n        { id: 'PROSPECT', name: 'Prospect' },\n        { id: 'APPLICANT', name: 'Applicant' },\n        { id: 'REJECTED', name: 'Rejected' },\n        { id: 'LEARNER', name: 'Learner' },\n        { id: 'DROPPED', name: 'Dropped' },\n        { id: 'ALUMNI', name: 'Alumni' },\n      ]} />\n  </Filter>\n);\n\nexport const TechieList = props => (\n    <List {...props} filters={<TechieFilter />}>\n        <Datagrid rowClick=\"edit\">\n            <EmailField source=\"email\" />\n            <SelectField source=\"location\" choices={[\n                  { id: 'BERLIN', name: 'Berlin' },\n                ]} />\n            <SelectField source=\"semester\" choices={[\n              { id: 'S_2020_01', name: '2020-01' },\n            ]} />\n            <SelectField source=\"state\" choices={[\n              { id: 'PROSPECT', name: 'Prospect' },\n              { id: 'APPLICANT', name: 'Applicant' },\n              { id: 'REJECTED', name: 'Rejected' },\n              { id: 'LEARNER', name: 'Learner' },\n              { id: 'DROPPED', name: 'Dropped' },\n              { id: 'ALUMNI', name: 'Alumni' },\n            ]} />\n        </Datagrid>\n    </List>\n);\n\nexport const TechieEdit = props => (\n  <Edit {...props}>\n      <SimpleForm>\n          <SelectInput source=\"location\" choices={[\n            { id: 'BERLIN', name: 'Berlin' },\n          ]} />\n          <SelectInput source=\"semester\" choices={[\n            { id: 'S_2020_01', name: '2020-01' },\n          ]} />\n          <SelectInput source=\"state\" choices={[\n            { id: 'PROSPECT', name: 'Prospect' },\n            { id: 'APPLICANT', name: 'Applicant' },\n            { id: 'REJECTED', name: 'Rejected' },\n            { id: 'LEARNER', name: 'Learner' },\n            { id: 'DROPPED', name: 'Dropped' },\n            { id: 'ALUMNI', name: 'Alumni' },\n          ]} />\n          <TextInput source=\"email\" />\n      </SimpleForm>\n  </Edit>\n);\n\nexport const TechieCreate = props => (\n  <Create {...props}>\n    <SimpleForm>\n          <SelectInput source=\"location\" choices={[\n                  { id: 'BERLIN', name: 'Berlin' },\n                ]} />\n          <SelectInput source=\"semester\" choices={[\n            { id: 'S_2020_01', name: '2020-01' },\n          ]} />\n          <SelectInput source=\"state\" choices={[\n            { id: 'PROSPECT', name: 'Prospect' },\n            { id: 'APPLICANT', name: 'Applicant' },\n            { id: 'REJECTED', name: 'Rejected' },\n            { id: 'LEARNER', name: 'Learner' },\n            { id: 'DROPPED', name: 'Dropped' },\n            { id: 'ALUMNI', name: 'Alumni' },\n          ]} />\n          <TextInput source=\"email\" />\n      </SimpleForm>\n  </Create>\n);\n","import React, { Component } from 'react';\nimport { Admin, Resource } from 'react-admin';\n\nimport dataProvider from './dataProvider';\nimport authProvider from './authProvider';\nimport LoginPage from './login';\nimport { theme } from './theme';\nimport { TechieList, TechieEdit, TechieCreate } from './techies';\n\nclass App extends Component {\n  render() {\n      return (\n          <Admin dataProvider={dataProvider} authProvider={authProvider} loginPage={LoginPage} theme={theme}>\n            <Resource name=\"techies\" list={TechieList} edit={TechieEdit} create={TechieCreate} />\n          </Admin>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}